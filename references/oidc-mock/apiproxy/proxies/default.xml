<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
 Copyright 2020 Google LLC
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->
<ProxyEndpoint name="default">
    <PreFlow name="PreFlow">
        <Request>
            <Step>
                <Name>AM-CaptureHost</Name>
            </Step>
        </Request>
    </PreFlow>
    <Flows>
        <Flow name="GET /authorize">
            <Condition>(proxy.pathsuffix MatchesPath "/authorize") and 
            (request.verb = "GET")</Condition>
            <Request>
                <Step>
                    <Name>EV-AuthzQueryParams</Name>
                </Step>
                <Step>
                    <Condition>( oidc.flow.authorize.client_id Is null ) or 
                    ( oidc.flow.authorize.client_id = "" )</Condition>
                    <Name>RF-InvalidRequest-Html</Name>
                </Step>
                <Step>
                    <Condition>!(oidc.flow.authorize.client_id =| "dummy-client_id")</Condition>
                    <Name>RF-InvalidClient-Html</Name>
                </Step>
                <Step>
                    <Condition>( oidc.flow.authorize.redirect_uri Is null ) or 
                    ( oidc.flow.authorize.redirect_uri = "" ) or 
                    ( oidc.flow.authorize.redirect_uri = "https://example.com/invalid" )</Condition>
                    <Name>RF-InvalidRequest-Html</Name>
                </Step>
                <Step>
                    <Condition>oidc.flow.authorize.response_type != "code"</Condition>
                    <Name>RF-UnsupportedResponseType-Redirect</Name>
                </Step>
                <Step>
                    <Condition>( oidc.flow.authorize.state Is null ) or 
                    ( oidc.flow.authorize.state = "" )</Condition>
                    <Name>RF-InvalidRequest-Redirect</Name>
                </Step>
                <Step>
                    <Condition>( oidc.flow.authorize.scope Is null ) or 
                    ( oidc.flow.authorize.scope = "" )</Condition>
                    <Name>RF-InvalidRequest-Redirect</Name>
                </Step>
                <Step>
                    <Name>AM-SetAppName</Name>
                </Step>
            </Request>
            <Response>
                <Step>
                    <Name>AM-SetLoginPage</Name>
                </Step>
            </Response>
        </Flow>
        <Flow name="POST /token">
            <Condition>(proxy.pathsuffix MatchesPath "/token") and 
            (request.verb = "POST")</Condition>
            <Request>
                <Step>
                    <Name>BA-GetClientCredentials</Name>
                </Step>
                <Step>
                    <Condition>!( oidc.flow.token.client_id =| "dummy-client_id" ) or 
                    !( oidc.flow.token.client_secret =| "dummy-client_secret" )</Condition>
                    <Name>RF-InvalidClient</Name>    
                </Step>
                <Step>
                    <Name>EV-TokenFormParams</Name>
                </Step>
                <Step>
                    <Condition>( oidc.flow.token.redirect_uri Is null ) or 
                    ( oidc.flow.token.redirect_uri = "" ) or 
                    ( oidc.flow.token.redirect_uri = "https://example.com/invalid" )</Condition>
                    <Name>RF-InvalidRequest</Name>
                </Step>
                <Step>
                    <Condition>( oidc.flow.token.scope Is null ) or 
                    ( oidc.flow.token.scope = "" )</Condition>
                    <Name>RF-InvalidRequest</Name>
                </Step>
                <Step>
                    <Condition>( oidc.flow.token.code Is null ) or 
                    ( oidc.flow.token.code = "" )</Condition>
                    <Name>RF-InvalidGrant</Name>
                </Step>
                <Step>
                    <Condition>oidc.flow.token.grant_type != "authorization_code"</Condition>
                    <Name>RF-UnsupportedGrantType</Name>
                </Step>
                <Step>
                    <Name>JS-GenerateAccessToken</Name>
                </Step>
                <Step>
                    <Name>AM-SetIdToken</Name>
                </Step>
            </Request>
        </Flow>
        <Flow name="POST /introspect">
            <Condition>(proxy.pathsuffix MatchesPath "/introspect") and 
            (request.verb = "POST")</Condition>
            <Request>
                <Step>
                    <Name>EV-TokenToIntrospect</Name>
                </Step>
                <Step>
                    <Name>BA-GetClientCredentials</Name>
                </Step>
                <Step>
                    <Condition>!( oidc.flow.token.client_id =| "dummy-client_id" ) or 
                    !( oidc.flow.token.client_secret =| "dummy-client_secret" )</Condition>
                    <Name>RF-InvalidClient</Name>
                </Step>
                <Step>
                    <Condition>( oidc.flow.introspect.token Is null ) or 
                    ( oidc.flow.introspect.token = "" )</Condition>
                    <Name>RF-InvalidRequest</Name>
                </Step>
                <Step>
                    <Condition>!( oidc.flow.introspect.token =| "dummy-access_token" )</Condition>
                    <Name>RF-InvalidGrant</Name>
                </Step>
                <Step>
                    <Name>AM-SetIntrospectionResponse</Name>
                </Step>
            </Request>
        </Flow>
        <Flow name="GET /userinfo">
            <Condition>(proxy.pathsuffix MatchesPath "/userinfo") and 
            (request.verb = "GET")</Condition>
            <Request>
                <Step>
                    <Name>EV-BearerToken</Name>
                </Step>
                <Step>
                    <Condition>( oidc.flow.userinfo.token Is null ) or 
                    ( oidc.flow.userinfo.token = "" )</Condition>
                    <Name>RF-InvalidRequest</Name>
                </Step>
                <Step>
                    <Condition>!( oidc.flow.userinfo.token =| "dummy-access_token" )</Condition>
                    <Name>RF-InvalidGrant</Name>
                </Step>
                <Step>
                    <Name>AM-SetUserInfoResponse</Name>
                </Step>
            </Request>
        </Flow>
        <Flow name="GET /certs">
            <Condition>(proxy.pathsuffix MatchesPath "/certs") and 
            (request.verb = "GET")</Condition>
            <Request>
                <Step>
                    <Name>AM-SetJWKS</Name>
                </Step>
            </Request>
        </Flow>
        <Flow name="GET /.well-known/openid-configuration">
            <Condition>(proxy.pathsuffix MatchesPath "/.well-known/openid-configuration") and 
            (request.verb = "GET")</Condition>
            <Request>
                <Step>
                    <Name>AM-SetDiscoveryDocument</Name>
                </Step>
            </Request>
        </Flow>
        <Flow name="POST /consent">
            <Condition>(proxy.pathsuffix MatchesPath "/consent") and 
            (request.verb = "POST")</Condition>
            <Request>
                <Step>
                    <Name>EV-TokenFormParams</Name>
                </Step>
                <Step>
                    <Condition>( oidc.flow.token.redirect_uri Is null ) or 
                    ( oidc.flow.token.redirect_uri = "" ) or 
                    ( oidc.flow.token.redirect_uri = "https://example.com/invalid" )</Condition>
                    <Name>RF-InvalidRequest-Html</Name>
                </Step>
                <Step>
                    <Condition>( oidc.flow.token.state Is null ) or 
                    ( oidc.flow.token.state = "" )</Condition>
                    <Name>AM-SetRedirectURIVariable</Name>
                </Step>
                <Step>
                    <Condition>( oidc.flow.token.state Is null ) or 
                    ( oidc.flow.token.state = "" )</Condition>
                    <Name>RF-InvalidRequest-Redirect</Name>
                </Step>
            </Request>
            <Response>
                <Step>
                    <Name>AM-SetConsentPage</Name>
                </Step>
            </Response>
        </Flow>
        <Flow name="POST /confirm">
            <Condition>(proxy.pathsuffix MatchesPath "/confirm") and 
            (request.verb = "POST")</Condition>
            <Request>
                <Step>
                    <Name>EV-TokenFormParams</Name>
                </Step>
                <Step>
                    <Condition>( oidc.flow.token.state Is null ) or 
                    ( oidc.flow.token.state = "" )</Condition>
                    <Name>RF-InvalidRequest</Name>
                </Step>
                <Step>
                    <Condition>( oidc.flow.token.redirect_uri Is null ) or 
                    ( oidc.flow.token.redirect_uri = "" ) or 
                    ( oidc.flow.token.redirect_uri = "https://example.com/invalid" )</Condition>
                    <Name>RF-InvalidRequest</Name>
                </Step>
                <Step>
                    <Name>JS-GenerateAzCode</Name>
                </Step>
            </Request>
            <Response>
                <Step>
                    <Name>AM-SetRedirectLocationToClientApp</Name>
                </Step>
            </Response>
        </Flow>
        <Flow name="404 - Not Found">
            <Request>
                <Step>
                    <Name>RF-404NotFound</Name>
                </Step>
            </Request>
        </Flow>
    </Flows>
    <HTTPProxyConnection>
        <BasePath>/v1/openid-connect</BasePath>
        <VirtualHost>secure</VirtualHost>
    </HTTPProxyConnection>
    <RouteRule name="noroute"/>
</ProxyEndpoint>